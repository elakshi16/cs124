[{"/Users/catherinejang/cs124/lab/src/index.js":"1","/Users/catherinejang/cs124/lab/src/App.js":"2","/Users/catherinejang/cs124/lab/src/reportWebVitals.js":"3","/Users/catherinejang/cs124/lab/src/Tasks.js":"4","/Users/catherinejang/cs124/lab/src/AddTask.js":"5","/Users/catherinejang/cs124/lab/src/Task.js":"6"},{"size":503,"mtime":1634171281087,"results":"7","hashOfConfig":"8"},{"size":965,"mtime":1634263606401,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1634018526191,"results":"10","hashOfConfig":"8"},{"size":1289,"mtime":1634263955602,"results":"11","hashOfConfig":"8"},{"size":710,"mtime":1634255217328,"results":"12","hashOfConfig":"8"},{"size":576,"mtime":1634263955597,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"1suu7d1",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"17"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/catherinejang/cs124/lab/src/index.js",["30"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n",["31","32"],"/Users/catherinejang/cs124/lab/src/App.js",[],"/Users/catherinejang/cs124/lab/src/reportWebVitals.js",[],"/Users/catherinejang/cs124/lab/src/Tasks.js",["33"],"import Task from'./Task';\nimport React, {useState} from \"react\";\nimport './Tasks.css';\n\nfunction Tasks(props) {\n    const [completedId, setCompletedId] = useState([]);\n    console.log(\"in Tasks\");\n    console.log(\"completedTasks:\" + completedId)\n\n    // function toggleEdit(){\n    //\n    // }\n\n    function switchComplete(id){\n        if (completedId.includes(id)){\n            setCompletedId(completedId.remove(id))\n        }\n        else{\n            setCompletedId(completedId.push(id))\n        }\n    }\n\n    return (<div className={'Tasks'}>\n        {props.list.map(elem => <div  className={'fullTask'}>\n                                    <Task //toggleComplete={switchComplete(elem.id)}\n                                        className={'Task'}\n                                        completed={completedId.includes(elem.id)}\n                                      elemid={elem.id}\n                                        onDeleteTask={props.onDeleteTask}\n                                      taskText={elem.title} {...elem}/>\n                                    {/*<div className=\"editButton\"><button onClick={e => toggleEdit()}>Edit</button></div>*/}         </div>)}\n        {completedId.length >1 && <button >Show Incomplete Tasks</button>}\n    </div>);\n}\n\nexport default Tasks;","/Users/catherinejang/cs124/lab/src/AddTask.js",["34","35"],"import React, {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport './AddTask.css';\n\nfunction generateId(currentId) {\n    return currentId ++;\n}\n\n\nfunction AddTask(props) {\n    const [text, setText] = useState(\"\");\n    console.log(\"in addTask\");\n\n    function clickHandler(e, task){\n        props.onAddTask(task)\n        setText(\"\")\n    }\n\n    return <div className={'fullAdd'}>\n            <input id=\"taskTextField\" type=\"text\" id ={generateUniqueID()} value={text} onChange={e => setText(e.target.value)} placeholder=\"Enter new task here\"/>\n            <button onClick={(e) => clickHandler(e, text)}> + </button>\n    </div>\n}\n\nexport default AddTask;","/Users/catherinejang/cs124/lab/src/Task.js",[],{"ruleId":"36","severity":1,"message":"37","line":5,"column":8,"nodeType":"38","messageId":"39","endLine":5,"endColumn":23},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"36","severity":1,"message":"44","line":14,"column":14,"nodeType":"38","messageId":"39","endLine":14,"endColumn":28},{"ruleId":"36","severity":1,"message":"45","line":5,"column":10,"nodeType":"38","messageId":"39","endLine":5,"endColumn":20},{"ruleId":"46","severity":1,"message":"47","line":20,"column":51,"nodeType":"48","messageId":"49","endLine":20,"endColumn":75},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["50"],"no-negated-in-lhs",["51"],"'switchComplete' is defined but never used.","'generateId' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-global-assign","no-unsafe-negation"]