{"ast":null,"code":"var _jsxFileName = \"/Users/catherinejang/cs124/lab/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Tasks from \"./Tasks\";\nimport React, { useState } from \"react\";\nimport AddTask from \"./AddTask\";\nimport { generateUniqueID } from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialData = [{\n  title: \"do something\",\n  id: \"123\",\n  completed: true\n}, {\n  title: \"do dishes\",\n  id: \"124\",\n  completed: false\n}]; // some toggleCompleted (similar to handleFieldChanged in People)\n\nfunction App() {\n  _s();\n\n  const [data, setData] = useState(initialData);\n  const [visibility, setVisibility] = useState(true);\n  let filteredList = data.filter(task => visibility || !task.completed);\n  console.log(\"in app\"); //\n  // function toggleVisibility(){\n  //     data.map(elem =>(elem.completed)? :)]\n  //\n  //     function myFunction() {\n  //         var x = document.getElementById(\"myDIV\");\n  //         if (x.style.display === \"none\") {\n  //             x.style.display = \"block\";\n  //         } else {\n  //             x.style.display = \"none\";\n  //         }\n  //     }\n  // }\n\n  function handleTaskFieldChange(taskid, field, newVal) {\n    if (field === \"text\") {\n      setData(data.map(elem => elem.id === taskid ? elem.field = newVal : \"\"));\n    }\n\n    if (field === \"completed\") {\n      setData();\n    }\n  } // pass in all of data, but also pass in showCompleted (visibility) and tasks would filter things out\n  // or app does filterning and only passes the filtered list into tasks\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'App',\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Checklist App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(AddTask, {\n      className: 'addTask',\n      onAddTask: text => setData(data.concat([{\n        id: generateUniqueID(),\n        title: text\n      }]))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n      className: 'Tasks',\n      list: filteredList,\n      onTaskFieldChange: handleTaskFieldChange,\n      onDeleteTask: deletedId => setData(data.filter(task => task.id !== deletedId))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'endButtons',\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: 'largeButton',\n        onClick: e => setData([]),\n        children: \"Delete All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }, this), \"//just have the value change instead of having a new button //rename visibility to show completed\", visibility && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"largeButton\",\n        onClick: e => setVisibility(!visibility),\n        children: \" Hide Complete Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 30\n      }, this), !visibility && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"largeButton\",\n        onClick: e => setVisibility(!visibility),\n        children: \" Show All Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 11\n  }, this);\n}\n\n_s(App, \"xafyrepSAN1SsW4ktrDzyi8dquc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/catherinejang/cs124/lab/src/App.js"],"names":["Tasks","React","useState","AddTask","generateUniqueID","initialData","title","id","completed","App","data","setData","visibility","setVisibility","filteredList","filter","task","console","log","handleTaskFieldChange","taskid","field","newVal","map","elem","text","concat","deletedId","e"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,gBAAR,QAA+B,8CAA/B;;AAEA,MAAMC,WAAW,GAAG,CAClB;AACEC,EAAAA,KAAK,EAAE,cADT;AAEEC,EAAAA,EAAE,EAAE,KAFN;AAGEC,EAAAA,SAAS,EAAE;AAHb,CADkB,EAMlB;AACEF,EAAAA,KAAK,EAAE,WADT;AAEEC,EAAAA,EAAE,EAAE,KAFN;AAGEC,EAAAA,SAAS,EAAE;AAHb,CANkB,CAApB,C,CAYC;;AACD,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAACG,WAAD,CAAhC;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,IAAD,CAA5C;AACA,MAAIY,YAAY,GAAGJ,IAAI,CAACK,MAAL,CAAYC,IAAI,IAAIJ,UAAU,IAAI,CAACI,IAAI,CAACR,SAAxC,CAAnB;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAJa,CAKb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,WAASC,qBAAT,CAA+BC,MAA/B,EAAsCC,KAAtC,EAA4CC,MAA5C,EAAmD;AAC/C,QAAID,KAAK,KAAK,MAAd,EAAqB;AACjBV,MAAAA,OAAO,CAACD,IAAI,CAACa,GAAL,CAASC,IAAI,IAAIA,IAAI,CAACjB,EAAL,KAAYa,MAAZ,GAAoBI,IAAI,CAACH,KAAL,GAAaC,MAAjC,GAAyC,EAA1D,CAAD,CAAP;AACH;;AACD,QAAID,KAAK,KAAK,WAAd,EAA0B;AACtBV,MAAAA,OAAO;AACV;AACJ,GA1BU,CA2Bf;AACI;;;AACF,sBAAQ;AAAK,IAAA,SAAS,EAAE,KAAhB;AAAA,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAEA,QAAC,OAAD;AAAS,MAAA,SAAS,EAAE,SAApB;AAA+B,MAAA,SAAS,EAAGc,IAAD,IAAUd,OAAO,CAACD,IAAI,CAACgB,MAAL,CAAY,CAAC;AAACnB,QAAAA,EAAE,EAAEH,gBAAgB,EAArB;AAAyBE,QAAAA,KAAK,EAAEmB;AAAhC,OAAD,CAAZ,CAAD;AAA3D;AAAA;AAAA;AAAA;AAAA,YAFA,eAGF,QAAC,KAAD;AAAO,MAAA,SAAS,EAAE,OAAlB;AAA2B,MAAA,IAAI,EAAEX,YAAjC;AAA+C,MAAA,iBAAiB,EAAEK,qBAAlE;AAAyF,MAAA,YAAY,EAAKQ,SAAD,IAAehB,OAAO,CAACD,IAAI,CAACK,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACT,EAAL,KAAYoB,SAAhC,CAAD;AAA/H;AAAA;AAAA;AAAA;AAAA,YAHE,eAIA;AAAK,MAAA,SAAS,EAAE,YAAhB;AAAA,8BACI;AAAQ,QAAA,SAAS,EAAE,aAAnB;AAAkC,QAAA,OAAO,EAAEC,CAAC,IAAIjB,OAAO,CAAC,EAAD,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,uGAIKC,UAAU,iBAAI;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAgC,QAAA,OAAO,EAAEgB,CAAC,IAAIf,aAAa,CAAC,CAACD,UAAF,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJnB,EAKK,CAACA,UAAD,iBAAe;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAgC,QAAA,OAAO,EAAEgB,CAAC,IAAIf,aAAa,CAAC,CAACD,UAAF,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALpB;AAAA;AAAA;AAAA;AAAA;AAAA,YAJA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAcD;;GA3CQH,G;;KAAAA,G;AA6CT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport Tasks from \"./Tasks\";\nimport React, {useState} from \"react\";\nimport AddTask from \"./AddTask\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\nconst initialData = [\n  {\n    title: \"do something\",\n    id: \"123\",\n    completed: true\n  },\n  {\n    title: \"do dishes\",\n    id: \"124\",\n    completed: false\n  }\n]\n // some toggleCompleted (similar to handleFieldChanged in People)\nfunction App() {\n  const [data, setData] = useState(initialData);\n  const [visibility, setVisibility] = useState(true);\n  let filteredList = data.filter(task => visibility || !task.completed);\n  console.log(\"in app\");\n  //\n  // function toggleVisibility(){\n  //     data.map(elem =>(elem.completed)? :)]\n  //\n  //     function myFunction() {\n  //         var x = document.getElementById(\"myDIV\");\n  //         if (x.style.display === \"none\") {\n  //             x.style.display = \"block\";\n  //         } else {\n  //             x.style.display = \"none\";\n  //         }\n  //     }\n  // }\n\n    function handleTaskFieldChange(taskid,field,newVal){\n        if (field === \"text\"){\n            setData(data.map(elem => elem.id === taskid? elem.field = newVal: \"\"))\n        }\n        if (field === \"completed\"){\n            setData()\n        }\n    }\n// pass in all of data, but also pass in showCompleted (visibility) and tasks would filter things out\n    // or app does filterning and only passes the filtered list into tasks\n  return (<div className={'App'}>\n          <h1>Checklist App</h1>\n          <AddTask className={'addTask'} onAddTask={(text) => setData(data.concat([{id: generateUniqueID(), title: text}]))}/>\n        <Tasks className={'Tasks'} list={filteredList} onTaskFieldChange={handleTaskFieldChange} onDeleteTask = {(deletedId) => setData(data.filter(task => task.id !== deletedId))}/>\n          <div className={'endButtons'}>\n              <button className={'largeButton'} onClick={e => setData([])}>Delete All</button>\n              //just have the value change instead of having a new button\n              //rename visibility to show completed\n              {visibility && <button className=\"largeButton\" onClick={e => setVisibility(!visibility)}> Hide Complete Tasks</button>}\n              {!visibility && <button className=\"largeButton\" onClick={e => setVisibility(!visibility)}> Show All Tasks</button>}\n              {/*<div className={'fullButton'}><button className={\"deleteButton\"} onClick={e => props.onDeleteTask(elem.id)}>Delete</button></div>*/}\n          </div>\n      </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}