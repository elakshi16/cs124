{"ast":null,"code":"var _jsxFileName = \"/Users/catherinejang/cs124/lab/src/Tasks.js\",\n    _s = $RefreshSig$();\n\nimport Task from './Task';\nimport React, { useState } from \"react\";\nimport './Tasks.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tasks(props) {\n  _s();\n\n  const [completedId, setCompletedId] = useState([]);\n  console.log(\"in Tasks\");\n  console.log(\"completedTasks:\" + completedId); // function toggleEdit(){\n  //\n  // }\n\n  function switchComplete(id) {\n    if (completedId.includes(id)) {\n      setCompletedId(completedId.remove(id));\n    } else {\n      setCompletedId(completedId.push(id));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'Tasks',\n    children: [props.list.map(elem => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Task //toggleComplete={switchComplete(elem.id)}\n      , {\n        className: 'Task',\n        completed: completedId.includes(elem.id),\n        elemid: elem.id,\n        onDeleteTask: props.onDeleteTask,\n        taskText: elem.title,\n        ...elem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 37\n      }, this), \"         \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 33\n    }, this)), completedId.length > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Show Incomplete Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 35\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Tasks, \"QMJAXmHgTmz/r0QZPXvyg4ALh9c=\");\n\n_c = Tasks;\nexport default Tasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"sources":["/Users/catherinejang/cs124/lab/src/Tasks.js"],"names":["Task","React","useState","Tasks","props","completedId","setCompletedId","console","log","switchComplete","id","includes","remove","push","list","map","elem","onDeleteTask","title","length"],"mappings":";;;AAAA,OAAOA,IAAP,MAAgB,QAAhB;AACA,OAAOC,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,aAAP;;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AAClB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBH,WAAhC,EAHkB,CAKlB;AACA;AACA;;AAEA,WAASI,cAAT,CAAwBC,EAAxB,EAA2B;AACvB,QAAIL,WAAW,CAACM,QAAZ,CAAqBD,EAArB,CAAJ,EAA6B;AACzBJ,MAAAA,cAAc,CAACD,WAAW,CAACO,MAAZ,CAAmBF,EAAnB,CAAD,CAAd;AACH,KAFD,MAGI;AACAJ,MAAAA,cAAc,CAACD,WAAW,CAACQ,IAAZ,CAAiBH,EAAjB,CAAD,CAAd;AACH;AACJ;;AAED,sBAAQ;AAAK,IAAA,SAAS,EAAE,OAAhB;AAAA,eACHN,KAAK,CAACU,IAAN,CAAWC,GAAX,CAAeC,IAAI,iBAAI;AAAA,8BACI,QAAC,IAAD,CAAM;AAAN;AACI,QAAA,SAAS,EAAE,MADf;AAEI,QAAA,SAAS,EAAEX,WAAW,CAACM,QAAZ,CAAqBK,IAAI,CAACN,EAA1B,CAFf;AAGE,QAAA,MAAM,EAAEM,IAAI,CAACN,EAHf;AAII,QAAA,YAAY,EAAEN,KAAK,CAACa,YAJxB;AAKE,QAAA,QAAQ,EAAED,IAAI,CAACE,KALjB;AAAA,WAK4BF;AAL5B;AAAA;AAAA;AAAA;AAAA,cADJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAAvB,CADG,EASHX,WAAW,CAACc,MAAZ,GAAoB,CAApB,iBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATtB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAWH;;GA7BQhB,K;;KAAAA,K;AA+BT,eAAeA,KAAf","sourcesContent":["import Task from'./Task';\nimport React, {useState} from \"react\";\nimport './Tasks.css';\n\nfunction Tasks(props) {\n    const [completedId, setCompletedId] = useState([]);\n    console.log(\"in Tasks\");\n    console.log(\"completedTasks:\" + completedId)\n\n    // function toggleEdit(){\n    //\n    // }\n\n    function switchComplete(id){\n        if (completedId.includes(id)){\n            setCompletedId(completedId.remove(id))\n        }\n        else{\n            setCompletedId(completedId.push(id))\n        }\n    }\n\n    return (<div className={'Tasks'}>\n        {props.list.map(elem => <div>\n                                    <Task //toggleComplete={switchComplete(elem.id)}\n                                        className={'Task'}\n                                        completed={completedId.includes(elem.id)}\n                                      elemid={elem.id}\n                                        onDeleteTask={props.onDeleteTask}\n                                      taskText={elem.title} {...elem}/>\n                                    {/*<div className=\"editButton\"><button onClick={e => toggleEdit()}>Edit</button></div>*/}         </div>)}\n        {completedId.length >1 && <button >Show Incomplete Tasks</button>}\n    </div>);\n}\n\nexport default Tasks;"]},"metadata":{},"sourceType":"module"}